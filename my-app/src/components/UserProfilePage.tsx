"use client";

import { useState, useEffect } from "react";
import { useAuth } from "@/contexts/AuthContext";
import { subscriptionService } from "@/services/subscription.service";
import { creatorService } from "@/services/creator.service";
import { useRouter } from "next/navigation";
import type { UserSubscription, SubscriptionPlan } from "@/types/subscription.types";
import type { MyApplicationStatus } from "@/types/creator.types";
import CreatorApplicationForm from "./CreatorApplicationForm";

type TabType = "profile" | "subscription" | "payment" | "creator";

export default function UserProfilePage() {
  const router = useRouter();
  const { user, isAuthenticated, isLoading: authLoading } = useAuth();
  const [activeTab, setActiveTab] = useState<TabType>("profile");
  const [subscription, setSubscription] = useState<UserSubscription | null>(null);
  const [subscriptionPlan, setSubscriptionPlan] = useState<SubscriptionPlan | null>(null);
  const [isLoadingSubscription, setIsLoadingSubscription] = useState(false);
  
  // Creator application states
  const [creatorApplication, setCreatorApplication] = useState<MyApplicationStatus | null>(null);
  const [isLoadingCreatorApp, setIsLoadingCreatorApp] = useState(false);
  const [showApplicationForm, setShowApplicationForm] = useState(false);

  // Profile edit states
  const [isEditingProfile, setIsEditingProfile] = useState(false);
  const [editedProfile, setEditedProfile] = useState({
    fullName: "",
    email: "",
    phoneNumber: "",
    address: "",
  });

  // Password change states
  const [isChangingPassword, setIsChangingPassword] = useState(false);
  const [passwordData, setPasswordData] = useState({
    currentPassword: "",
    newPassword: "",
    confirmPassword: "",
  });

  useEffect(() => {
    if (!authLoading && !isAuthenticated) {
      router.push("/auth");
    }
  }, [isAuthenticated, authLoading, router]);

  useEffect(() => {
    if (user) {
      setEditedProfile({
        fullName: user.fullName || "",
        email: user.email || "",
        phoneNumber: user.phoneNumber || "",
        address: user.address || "",
      });
    }
  }, [user]);

  useEffect(() => {
    if (isAuthenticated && activeTab === "subscription") {
      fetchSubscription();
    }
  }, [isAuthenticated, activeTab]);

  useEffect(() => {
    if (isAuthenticated && activeTab === "creator") {
      fetchCreatorApplication();
    }
  }, [isAuthenticated, activeTab]);

  const fetchSubscription = async () => {
    setIsLoadingSubscription(true);
    try {
      const data = await subscriptionService.getMySubscription();
      setSubscription(data);
      
      // Fetch subscription plan details
      if (data && data.subscriptionPlanId) {
        try {
          const planData = await subscriptionService.getSubscriptionPlanById(data.subscriptionPlanId);
          setSubscriptionPlan(planData);
        } catch (error) {
          console.error("Error fetching subscription plan:", error);
        }
      }
    } catch (error) {
      console.error("Error fetching subscription:", error);
    } finally {
      setIsLoadingSubscription(false);
    }
  };

  const handleSaveProfile = async () => {
    // TODO: Implement update profile API call
    console.log("Saving profile:", editedProfile);
    setIsEditingProfile(false);
  };

  const handleChangePassword = async () => {
    if (passwordData.newPassword !== passwordData.confirmPassword) {
      alert("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp");
      return;
    }
    // TODO: Implement change password API call
    console.log("Changing password");
    setIsChangingPassword(false);
    setPasswordData({ currentPassword: "", newPassword: "", confirmPassword: "" });
  };

  const fetchCreatorApplication = async () => {
    setIsLoadingCreatorApp(true);
    try {
      const data = await creatorService.getMyApplicationStatus();
      setCreatorApplication(data);
    } catch (error) {
      console.error("Error fetching creator application:", error);
    } finally {
      setIsLoadingCreatorApp(false);
    }
  };

  const handleApplicationSuccess = () => {
    // Save current scroll position
    const currentScrollY = window.scrollY;
    
    setShowApplicationForm(false);
    fetchCreatorApplication();
    
    // Restore scroll position after state update
    setTimeout(() => {
      window.scrollTo({ top: currentScrollY, behavior: 'instant' });
    }, 50);
  };

  const handleCancelSubscription = async () => {
    if (!subscription) return;
    
    if (!confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy g√≥i ƒëƒÉng k√Ω?")) return;

    try {
      await subscriptionService.cancelSubscription(subscription.id, {
        reason: "User requested cancellation",
        cancelAtPeriodEnd: true,
      });
      alert("ƒê√£ h·ªßy g√≥i ƒëƒÉng k√Ω th√†nh c√¥ng");
      fetchSubscription();
    } catch (error) {
      console.error("Error canceling subscription:", error);
      alert("C√≥ l·ªói x·∫£y ra khi h·ªßy g√≥i ƒëƒÉng k√Ω");
    }
  };

  if (authLoading) {
    return (
      <div className="flex min-h-[60vh] items-center justify-center">
        <div className="text-[#604B3B]">ƒêang t·∫£i...</div>
      </div>
    );
  }

  if (!user) return null;

  const tabs = [
    { id: "profile" as TabType, label: "Th√¥ng tin c√° nh√¢n", icon: "üë§" },
    { id: "subscription" as TabType, label: "G√≥i ƒëƒÉng k√Ω", icon: "üí≥" },
    { id: "payment" as TabType, label: "L·ªãch s·ª≠ thanh to√°n", icon: "üìä" },
    { id: "creator" as TabType, label: "Tr·ªü th√†nh Creator", icon: "‚ú®" },
  ];

  return (
    <div className="min-h-screen bg-gradient-to-b from-[#FBE7BA]/20 to-white py-12">
      <div className="mx-auto max-w-6xl px-4 sm:px-6">
        {/* Header */}
        <div className="mb-8 text-center">
          <h1 className="text-3xl font-bold text-[#604B3B] sm:text-4xl">
            T√†i kho·∫£n c·ªßa t√¥i
          </h1>
          <p className="mt-2 text-[#604B3B]/70">
            Qu·∫£n l√Ω th√¥ng tin c√° nh√¢n v√† ƒëƒÉng k√Ω
          </p>
        </div>

        {/* Tabs */}
        <div className="mb-8 flex flex-wrap justify-center gap-2 sm:gap-4">
          {tabs.map((tab) => (
            <button
              key={tab.id}
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                setActiveTab(tab.id);
              }}
              className={`flex items-center gap-2 rounded-full px-4 py-2 text-sm font-medium transition-all sm:px-6 sm:py-3 sm:text-base ${
                activeTab === tab.id
                  ? "bg-[#604B3B] text-white shadow-lg"
                  : "bg-white text-[#604B3B] hover:bg-[#FBE7BA]/30"
              }`}
            >
              <span>{tab.icon}</span>
              <span className="hidden sm:inline">{tab.label}</span>
            </button>
          ))}
        </div>

        {/* Content */}
        <div className="rounded-2xl bg-white p-6 shadow-lg sm:p-8">
          {/* Profile Tab */}
          {activeTab === "profile" && (
            <div className="space-y-8">
              {/* Avatar Section */}
              <div className="flex flex-col items-center gap-4 border-b border-[#604B3B]/10 pb-8">
                <div className="flex h-24 w-24 items-center justify-center rounded-full bg-[#FBE7BA] text-4xl font-bold text-[#604B3B]">
                  {user.fullName?.charAt(0).toUpperCase() || "U"}
                </div>
                <div className="text-center">
                  <h2 className="text-2xl font-bold text-[#604B3B]">{user.fullName}</h2>
                  <p className="text-sm text-[#604B3B]/70">{user.email}</p>
                </div>
              </div>

              {/* Profile Information */}
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <h3 className="text-xl font-semibold text-[#604B3B]">
                    Th√¥ng tin c√° nh√¢n
                  </h3>
                  {!isEditingProfile && (
                    <button
                      onClick={() => setIsEditingProfile(true)}
                      className="rounded-lg bg-[#D0BF98] px-4 py-2 text-sm font-medium text-[#604B3B] transition-colors hover:bg-[#c9b083]"
                    >
                      Ch·ªânh s·ª≠a
                    </button>
                  )}
                </div>

                {isEditingProfile ? (
                  <div className="space-y-4">
                    <div>
                      <label className="mb-2 block text-sm font-medium text-[#604B3B]">
                        H·ªç v√† t√™n
                      </label>
                      <input
                        type="text"
                        value={editedProfile.fullName}
                        onChange={(e) =>
                          setEditedProfile({ ...editedProfile, fullName: e.target.value })
                        }
                        className="w-full rounded-lg border border-[#D0BF98] px-4 py-2 text-[#604B3B] focus:border-[#604B3B] focus:outline-none focus:ring-2 focus:ring-[#604B3B]/20"
                      />
                    </div>
                    <div>
                      <label className="mb-2 block text-sm font-medium text-[#604B3B]">
                        Email
                      </label>
                      <input
                        type="email"
                        value={editedProfile.email}
                        disabled
                        className="w-full rounded-lg border border-[#D0BF98] bg-gray-50 px-4 py-2 text-[#604B3B]/50"
                      />
                    </div>
                    <div>
                      <label className="mb-2 block text-sm font-medium text-[#604B3B]">
                        S·ªë ƒëi·ªán tho·∫°i
                      </label>
                      <input
                        type="tel"
                        value={editedProfile.phoneNumber}
                        onChange={(e) =>
                          setEditedProfile({ ...editedProfile, phoneNumber: e.target.value })
                        }
                        className="w-full rounded-lg border border-[#D0BF98] px-4 py-2 text-[#604B3B] focus:border-[#604B3B] focus:outline-none focus:ring-2 focus:ring-[#604B3B]/20"
                      />
                    </div>
                    <div>
                      <label className="mb-2 block text-sm font-medium text-[#604B3B]">
                        ƒê·ªãa ch·ªâ
                      </label>
                      <textarea
                        value={editedProfile.address}
                        onChange={(e) =>
                          setEditedProfile({ ...editedProfile, address: e.target.value })
                        }
                        rows={3}
                        className="w-full rounded-lg border border-[#D0BF98] px-4 py-2 text-[#604B3B] focus:border-[#604B3B] focus:outline-none focus:ring-2 focus:ring-[#604B3B]/20"
                      />
                    </div>
                    <div className="flex gap-3">
                      <button
                        onClick={handleSaveProfile}
                        className="flex-1 rounded-lg bg-[#604B3B] px-4 py-2 font-medium text-white transition-colors hover:bg-[#4a3a2d]"
                      >
                        L∆∞u thay ƒë·ªïi
                      </button>
                      <button
                        onClick={() => setIsEditingProfile(false)}
                        className="flex-1 rounded-lg border border-[#D0BF98] px-4 py-2 font-medium text-[#604B3B] transition-colors hover:bg-[#FBE7BA]/30"
                      >
                        H·ªßy
                      </button>
                    </div>
                  </div>
                ) : (
                  <div className="space-y-3">
                    <InfoRow label="H·ªç v√† t√™n" value={user.fullName || "Ch∆∞a c·∫≠p nh·∫≠t"} />
                    <InfoRow label="Email" value={user.email || "Ch∆∞a c·∫≠p nh·∫≠t"} />
                    <InfoRow label="S·ªë ƒëi·ªán tho·∫°i" value={user.phoneNumber || "Ch∆∞a c·∫≠p nh·∫≠t"} />
                    <InfoRow label="ƒê·ªãa ch·ªâ" value={user.address || "Ch∆∞a c·∫≠p nh·∫≠t"} />
                  </div>
                )}
              </div>

              {/* Change Password */}
              <div className="space-y-4 border-t border-[#604B3B]/10 pt-8">
                <div className="flex items-center justify-between">
                  <h3 className="text-xl font-semibold text-[#604B3B]">
                    ƒê·ªïi m·∫≠t kh·∫©u
                  </h3>
                  {!isChangingPassword && (
                    <button
                      onClick={() => setIsChangingPassword(true)}
                      className="rounded-lg bg-[#D0BF98] px-4 py-2 text-sm font-medium text-[#604B3B] transition-colors hover:bg-[#c9b083]"
                    >
                      ƒê·ªïi m·∫≠t kh·∫©u
                    </button>
                  )}
                </div>

                {isChangingPassword && (
                  <div className="space-y-4">
                    <div>
                      <label className="mb-2 block text-sm font-medium text-[#604B3B]">
                        M·∫≠t kh·∫©u hi·ªán t·∫°i
                      </label>
                      <input
                        type="password"
                        value={passwordData.currentPassword}
                        onChange={(e) =>
                          setPasswordData({ ...passwordData, currentPassword: e.target.value })
                        }
                        className="w-full rounded-lg border border-[#D0BF98] px-4 py-2 text-[#604B3B] focus:border-[#604B3B] focus:outline-none focus:ring-2 focus:ring-[#604B3B]/20"
                      />
                    </div>
                    <div>
                      <label className="mb-2 block text-sm font-medium text-[#604B3B]">
                        M·∫≠t kh·∫©u m·ªõi
                      </label>
                      <input
                        type="password"
                        value={passwordData.newPassword}
                        onChange={(e) =>
                          setPasswordData({ ...passwordData, newPassword: e.target.value })
                        }
                        className="w-full rounded-lg border border-[#D0BF98] px-4 py-2 text-[#604B3B] focus:border-[#604B3B] focus:outline-none focus:ring-2 focus:ring-[#604B3B]/20"
                      />
                    </div>
                    <div>
                      <label className="mb-2 block text-sm font-medium text-[#604B3B]">
                        X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi
                      </label>
                      <input
                        type="password"
                        value={passwordData.confirmPassword}
                        onChange={(e) =>
                          setPasswordData({ ...passwordData, confirmPassword: e.target.value })
                        }
                        className="w-full rounded-lg border border-[#D0BF98] px-4 py-2 text-[#604B3B] focus:border-[#604B3B] focus:outline-none focus:ring-2 focus:ring-[#604B3B]/20"
                      />
                    </div>
                    <div className="flex gap-3">
                      <button
                        onClick={handleChangePassword}
                        className="flex-1 rounded-lg bg-[#604B3B] px-4 py-2 font-medium text-white transition-colors hover:bg-[#4a3a2d]"
                      >
                        ƒê·ªïi m·∫≠t kh·∫©u
                      </button>
                      <button
                        onClick={() => {
                          setIsChangingPassword(false);
                          setPasswordData({ currentPassword: "", newPassword: "", confirmPassword: "" });
                        }}
                        className="flex-1 rounded-lg border border-[#D0BF98] px-4 py-2 font-medium text-[#604B3B] transition-colors hover:bg-[#FBE7BA]/30"
                      >
                        H·ªßy
                      </button>
                    </div>
                  </div>
                )}
              </div>
            </div>
          )}

          {/* Subscription Tab */}
          {activeTab === "subscription" && (
            <div className="space-y-6">
              <h3 className="text-2xl font-semibold text-[#604B3B]">
                G√≥i ƒëƒÉng k√Ω hi·ªán t·∫°i
              </h3>

              {isLoadingSubscription ? (
                <div className="py-12 text-center text-[#604B3B]/70">
                  ƒêang t·∫£i th√¥ng tin ƒëƒÉng k√Ω...
                </div>
              ) : subscription ? (
                <div className="space-y-6">
                  {/* Current Subscription Card */}
                  <div className="rounded-xl border-2 border-[#604B3B] bg-gradient-to-br from-[#FBE7BA]/30 to-white p-6">
                    <div className="mb-4 flex items-start justify-between">
                      <div>
                        <h4 className="text-xl font-bold text-[#604B3B]">
                          {subscription.planName}
                        </h4>
                        <p className="text-sm text-[#604B3B]/70">
                          {getSubscriptionStatusText(subscription.subscriptionStatus)}
                        </p>
                      </div>
                      <div className={`rounded-full px-3 py-1 text-xs font-semibold ${
                        subscription.subscriptionStatus === 2
                          ? "bg-green-100 text-green-700"
                          : subscription.subscriptionStatus === 3
                          ? "bg-yellow-100 text-yellow-700"
                          : "bg-red-100 text-red-700"
                      }`}>
                        {getSubscriptionStatusBadge(subscription.subscriptionStatus)}
                      </div>
                    </div>

                    <div className="space-y-2 text-sm">
                      {subscriptionPlan && (
                        <>
                          <InfoRow
                            label="Gi√°"
                            value={subscriptionService.formatPrice(subscriptionPlan.amount, subscriptionPlan.currency)}
                          />
                          <InfoRow
                            label="Chu k·ª≥"
                            value={subscriptionService.getBillingPeriodText(
                              subscriptionPlan.billingPeriodCount,
                              subscriptionPlan.billingPeriodUnit
                            )}
                          />
                        </>
                      )}
                      {subscription.currentPeriodStart && (
                        <InfoRow
                          label="B·∫Øt ƒë·∫ßu"
                          value={new Date(subscription.currentPeriodStart).toLocaleDateString("vi-VN")}
                        />
                      )}
                      {subscription.currentPeriodEnd && (
                        <InfoRow
                          label="K·∫øt th√∫c"
                          value={new Date(subscription.currentPeriodEnd).toLocaleDateString("vi-VN")}
                        />
                      )}
                    </div>

                    {subscription.subscriptionStatus === 2 && (
                      <div className="mt-6 flex gap-3">
                        <button
                          onClick={() => router.push("/subscription")}
                          className="flex-1 rounded-lg bg-[#604B3B] px-4 py-2 font-medium text-white transition-colors hover:bg-[#4a3a2d]"
                        >
                          N√¢ng c·∫•p
                        </button>
                        <button
                          onClick={handleCancelSubscription}
                          className="flex-1 rounded-lg border border-red-500 px-4 py-2 font-medium text-red-500 transition-colors hover:bg-red-50"
                        >
                          H·ªßy ƒëƒÉng k√Ω
                        </button>
                      </div>
                    )}
                  </div>

                  {/* Subscription Features */}
                  {subscriptionPlan?.featureConfig && (
                    <div className="rounded-xl bg-[#FBE7BA]/20 p-6">
                      <h4 className="mb-4 font-semibold text-[#604B3B]">
                        T√≠nh nƒÉng g√≥i ƒëƒÉng k√Ω
                      </h4>
                      <ul className="space-y-2">
                        {subscriptionService.getFeaturesArray(subscriptionPlan.featureConfig).map((feature, index) => (
                          <li key={index} className="flex items-start gap-2 text-sm text-[#604B3B]">
                            <span className="text-green-600">‚úì</span>
                            <span>{feature}</span>
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}
                </div>
              ) : (
                <div className="py-12 text-center">
                  <p className="mb-4 text-[#604B3B]/70">
                    B·∫°n ch∆∞a c√≥ g√≥i ƒëƒÉng k√Ω n√†o
                  </p>
                  <button
                    onClick={() => router.push("/subscription")}
                    className="rounded-lg bg-[#604B3B] px-6 py-3 font-medium text-white transition-colors hover:bg-[#4a3a2d]"
                  >
                    Xem c√°c g√≥i ƒëƒÉng k√Ω
                  </button>
                </div>
              )}
            </div>
          )}

          {/* Payment History Tab */}
          {activeTab === "payment" && (
            <div className="space-y-6">
              <h3 className="text-2xl font-semibold text-[#604B3B]">
                L·ªãch s·ª≠ thanh to√°n
              </h3>
              <div className="py-12 text-center text-[#604B3B]/70">
                T√≠nh nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn
              </div>
            </div>
          )}

          {/* Creator Application Tab */}
          {activeTab === "creator" && (
            <div className="space-y-6">
              <h3 className="text-2xl font-semibold text-[#604B3B]">
                {creatorApplication ? "Tr·∫°ng th√°i ƒë∆°n ƒëƒÉng k√Ω" : "ƒêƒÉng k√Ω tr·ªü th√†nh Content Creator"}
              </h3>

              {isLoadingCreatorApp ? (
                <div className="py-12 text-center text-[#604B3B]/70">
                  ƒêang t·∫£i th√¥ng tin...
                </div>
              ) : creatorApplication ? (
                // Show application status
                <div className="space-y-6">
                  {/* Status Card */}
                  <div className="rounded-xl border-2 border-[#604B3B] bg-gradient-to-br from-[#FBE7BA]/30 to-white p-6">
                    <div className="mb-4 flex items-start justify-between">
                      <div>
                        <h4 className="text-xl font-bold text-[#604B3B]">
                          ƒê∆°n ƒëƒÉng k√Ω c·ªßa b·∫°n
                        </h4>
                        <p className="mt-1 text-sm text-[#604B3B]/70">
                          {creatorApplication.statusDescription}
                        </p>
                      </div>
                      <div className={`flex items-center gap-2 rounded-full px-4 py-2 text-sm font-semibold ${
                        creatorService.getStatusBadgeColor(creatorApplication.status)
                      }`}>
                        <span>{creatorService.getStatusIcon(creatorApplication.status)}</span>
                        <span>{creatorApplication.status}</span>
                      </div>
                    </div>

                    <div className="space-y-2 text-sm">
                      {creatorApplication.submittedAt && (
                        <InfoRow
                          label="Ng√†y n·ªôp ƒë∆°n"
                          value={new Date(creatorApplication.submittedAt).toLocaleDateString("vi-VN")}
                        />
                      )}
                      {creatorApplication.reviewedAt && (
                        <InfoRow
                          label="Ng√†y x√©t duy·ªát"
                          value={new Date(creatorApplication.reviewedAt).toLocaleDateString("vi-VN")}
                        />
                      )}
                      {creatorApplication.rejectionReason && (
                        <div className="mt-4 rounded-lg bg-red-50 border border-red-200 p-4">
                          <p className="font-semibold text-red-700">L√Ω do t·ª´ ch·ªëi:</p>
                          <p className="text-red-600">{creatorApplication.rejectionReason}</p>
                        </div>
                      )}
                    </div>
                  </div>

                  {/* Application Details */}
                  <div className="rounded-xl bg-[#FBE7BA]/20 p-6">
                    <h4 className="mb-4 font-semibold text-[#604B3B]">
                      Th√¥ng tin ƒë∆°n ƒëƒÉng k√Ω
                    </h4>
                    
                    <div className="space-y-4">
                      <div>
                        <p className="text-sm font-semibold text-[#604B3B]/70 mb-1">
                          Kinh nghi·ªám
                        </p>
                        <p className="text-sm text-[#604B3B] whitespace-pre-wrap">
                          {creatorApplication.experience}
                        </p>
                      </div>

                      {creatorApplication.portfolio && (
                        <div>
                          <p className="text-sm font-semibold text-[#604B3B]/70 mb-1">
                            Portfolio
                          </p>
                          <a
                            href={creatorApplication.portfolio}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="text-sm text-[#604B3B] underline hover:text-[#826B39]"
                          >
                            {creatorApplication.portfolio}
                          </a>
                        </div>
                      )}

                      <div>
                        <p className="text-sm font-semibold text-[#604B3B]/70 mb-1">
                          ƒê·ªông l·ª±c
                        </p>
                        <p className="text-sm text-[#604B3B] whitespace-pre-wrap">
                          {creatorApplication.motivation}
                        </p>
                      </div>

                      {creatorApplication.socialMedia && creatorApplication.socialMedia.length > 0 && (
                        <div>
                          <p className="text-sm font-semibold text-[#604B3B]/70 mb-2">
                            M·∫°ng x√£ h·ªôi
                          </p>
                          <div className="space-y-1">
                            {creatorApplication.socialMedia.map((link, index) => (
                              <a
                                key={index}
                                href={link}
                                target="_blank"
                                rel="noopener noreferrer"
                                className="block text-sm text-[#604B3B] underline hover:text-[#826B39]"
                              >
                                {link}
                              </a>
                            ))}
                          </div>
                        </div>
                      )}

                      {creatorApplication.additionalInfo && (
                        <div>
                          <p className="text-sm font-semibold text-[#604B3B]/70 mb-1">
                            Th√¥ng tin b·ªï sung
                          </p>
                          <p className="text-sm text-[#604B3B] whitespace-pre-wrap">
                            {creatorApplication.additionalInfo}
                          </p>
                        </div>
                      )}
                    </div>
                  </div>

                  {/* Action based on status */}
                  {creatorApplication.status === "Rejected" && (
                    <button
                      onClick={(e) => {
                        e.preventDefault();
                        e.stopPropagation();
                        setShowApplicationForm(true);
                      }}
                      className="w-full rounded-lg bg-[#604B3B] px-6 py-3 font-semibold text-white transition-colors hover:bg-[#4a3a2d]"
                    >
                      N·ªôp ƒë∆°n l·∫°i
                    </button>
                  )}
                  
                  {creatorApplication.status === "Pending" && (
                    <div className="rounded-lg bg-yellow-50 border border-yellow-200 p-4 text-center text-sm text-yellow-700">
                      ƒê∆°n c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c xem x√©t. Ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi trong v√≤ng 3-5 ng√†y l√†m vi·ªác.
                    </div>
                  )}

                  {creatorApplication.status === "Approved" && (
                    <div className="rounded-lg bg-green-50 border border-green-200 p-4">
                      <p className="text-center text-sm text-green-700 mb-3">
                        üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ tr·ªü th√†nh Content Creator c·ªßa Healink
                      </p>
                      <button
                        onClick={() => router.push("/creator/dashboard")}
                        className="w-full rounded-lg bg-green-600 px-6 py-3 font-semibold text-white transition-colors hover:bg-green-700"
                      >
                        ƒêi t·ªõi Creator Dashboard
                      </button>
                    </div>
                  )}
                </div>
              ) : showApplicationForm ? (
                // Show application form
                <CreatorApplicationForm
                  onSuccess={handleApplicationSuccess}
                  onCancel={() => setShowApplicationForm(false)}
                />
              ) : (
                // Show initial state - benefits and apply button
                <>
                  <div className="rounded-xl bg-gradient-to-br from-[#FBE7BA]/30 to-white p-6">
                    <h4 className="mb-4 text-lg font-semibold text-[#604B3B]">
                      L·ª£i √≠ch khi tr·ªü th√†nh Creator
                    </h4>
                    <ul className="space-y-3">
                      {[
                        "T·∫°o v√† xu·∫•t b·∫£n podcast c·ªßa ri√™ng b·∫°n",
                        "Ki·∫øm ti·ªÅn t·ª´ n·ªôi dung c·ªßa b·∫°n",
                        "Ti·∫øp c·∫≠n h√†ng tri·ªáu ng∆∞·ªùi nghe",
                        "C√¥ng c·ª• ph√¢n t√≠ch chi ti·∫øt",
                        "H·ªó tr·ª£ t·ª´ ƒë·ªôi ng≈© Healink",
                      ].map((benefit, index) => (
                        <li key={index} className="flex items-start gap-3">
                          <span className="text-xl">‚ú®</span>
                          <span className="text-[#604B3B]">{benefit}</span>
                        </li>
                      ))}
                    </ul>
                  </div>

                  <div className="rounded-xl border-2 border-[#D0BF98] bg-white p-6">
                    <h4 className="mb-4 text-lg font-semibold text-[#604B3B]">
                      Y√™u c·∫ßu
                    </h4>
                    <ul className="space-y-2 text-sm text-[#604B3B]/80">
                      <li>‚Ä¢ C√≥ kinh nghi·ªám t·∫°o n·ªôi dung √¢m thanh</li>
                      <li>‚Ä¢ Portfolio ho·∫∑c m·∫´u podcast m·∫´u</li>
                      <li>‚Ä¢ Cam k·∫øt t·∫°o n·ªôi dung ch·∫•t l∆∞·ª£ng</li>
                      <li>‚Ä¢ Tu√¢n th·ªß quy ƒë·ªãnh c·ªông ƒë·ªìng</li>
                    </ul>
                  </div>

                  <button
                    onClick={(e) => {
                      e.preventDefault();
                      e.stopPropagation();
                      setShowApplicationForm(true);
                    }}
                    className="w-full rounded-lg bg-[#604B3B] px-6 py-3 font-semibold text-white transition-colors hover:bg-[#4a3a2d]"
                  >
                    N·ªôp ƒë∆°n ƒëƒÉng k√Ω
                  </button>
                </>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

// Helper Components
function InfoRow({ label, value }: { label: string; value: string }) {
  return (
    <div className="flex justify-between border-b border-[#604B3B]/10 py-3">
      <span className="font-medium text-[#604B3B]/70">{label}</span>
      <span className="text-[#604B3B]">{value}</span>
    </div>
  );
}

// Helper Functions
function getSubscriptionStatusText(status: number): string {
  switch (status) {
    case 1:
      return "ƒêang ch·ªù";
    case 2:
      return "ƒêang ho·∫°t ƒë·ªông";
    case 3:
      return "ƒê√£ h·ªßy";
    case 4:
      return "H·∫øt h·∫°n";
    case 5:
      return "ƒê√£ t·∫°m d·ª´ng";
    default:
      return "Kh√¥ng x√°c ƒë·ªãnh";
  }
}

function getSubscriptionStatusBadge(status: number): string {
  switch (status) {
    case 1:
      return "Ch·ªù";
    case 2:
      return "Ho·∫°t ƒë·ªông";
    case 3:
      return "ƒê√£ h·ªßy";
    case 4:
      return "H·∫øt h·∫°n";
    case 5:
      return "T·∫°m d·ª´ng";
    default:
      return "N/A";
  }
}
